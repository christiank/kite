#
# Kite => for the dynamic web
#

Kite is a really simple web application framework, inspired by Sinatra and
Christian Neukirchen's own mini-framework, Rum. It *just barely* rides on top of
Rack... Kite is more like a URL-mapper. You'll have to toss in your own
template engine and data backend.

  app = Kite.new do

    on get, '/' do
      puts "This is the index."
    end

    on get, 'posts', number do |_, post_id|
      puts "#{some_database[post_id]}"
    end

    on post, 'posts', number do |_, post_id|
      some_database[post_id].insert( ... )
      res.redirect '/'
    end

    default do
      puts "I don't know what you're looking for."
    end

  end
  run app

=====

A Kite application is a collection of "path-segments" and their corresponding
actions. These actions are executed when an HTTP client requests a URL which
matches one defined by you. If nothing matches, a default action is performed
instead.

Every segment of a path passes data into its own block. You can use "_" to
ignore data you don't need.

The available methods are:

  number       matches a sequence of digits.
  segment      matches a sequence of "URL-safe" characters (letters, numbers,
               underscore, dash)
  req, res     access the Rack::Request and Rack::Response
  puts, print  wrappers around res.write
  params       a shortcut for req.params
  params { }   you can pass the values of the GET and POST data into the block.
  params?      indicates where there is any GET or POST data
  default { }  specify the actions to take if no paths match
  default!     force the application to take the default action

You can create your own by passing a regular expression which captures one
string: that's the string which gets passed into the block. For example:

  on get, 'movies', /\A(*.at)\z/ do |_, _, title|
    ...
  end

will be matched if the requested URL is '/movies/bat' or '/movies/shalakabhat'
or anything like that.

=====

Kite is released under the MIT License.

Copyright (c) 2010 Christian Koch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

